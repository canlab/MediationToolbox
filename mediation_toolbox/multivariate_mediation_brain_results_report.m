function multivariate_mediation_brain_results_report(varargin)
% This function runs and saves tables, images, and clusters
% for the different pdms of a multivariate mediation model
%
% Adapted from mediation_brain_results_report.m by Lukas Van Oudenhove
% May 2021
% NOTE: only tested on single-level multivariate mediation for now!
% pdm calculated using 
% https://github.com/labgas/proj-emosymp/blob/main/secondlevel/model_1_CANlab_classic_GLM/emosymp_m1_s6_mediation_NPS.m
% see also example script
% https://github.com/canlab/MediationToolbox/blob/master/PDM_toolbox/Multivariate_Mediation_ExampleScript.m
% 
% Use
% - Run from mediation results directory
%
% Does 
% - Autolabeling of regions
% - Saves region objects with extracted data within each region
% - Requires object oriented tools in CANlab_Core_Tools
% - Used in publish_multivariate_mediation_brain_results_report to create published reports.
%
% The thresholds are fixed right now, and two sets of results are run:
% One at .01, and one with an across-contrast FDR correction at q < .05
%
% See also: publish_multivariate_mediation_report.m


%% SET OPTIONS
%----------------------------------------------------------------
% Default options - could be changed later
% --------------------------------------------------------

kthresh = 10;    % cluster extent threshold
pthresh = .005;  % P-value threshold for uncorrected results

% Display helper functions: Called by later scripts
% --------------------------------------------------------

dashes = '----------------------------------------------';
printhdr = @(str) fprintf('%s\n%s\n%s\n', dashes, str, dashes);


%% LOADING RESULTS AND DATA OBJECTS GENERATED BY PDM SCRIPT
%----------------------------------------------------------------
resultsdir = pwd;
contrastname = split(resultsdir,"\");
contrastname = contrastname{end-1};
Yname = split(resultsdir,"\");
Yname = Yname{end};

printhdr('LOADING multivariate mediation results');

% load data_obj for single-level only. Multi-level data can be too large to load all
% objects - extract data on-demand from clusters.

pdmresults = dir('PDMresults*.mat');
load(pdmresults.name);
pdm = out;
clear out;

data_objects = dir('data_objects*.mat');
load(data_objects.name);

pdmsource = dir('PDM_source*.mat');
load(pdmsource.name);

printhdr('Loaded multivariate mediation!');


%% PLOT AND PRINT PATH COEFFICIENTS
%-----------------------------------------------------------------

printhdr('path coefficients');

theta = [pdmfull.Theta{:}];
dashes = '_____________________________________________________________________';
fprintf('\nPDM path coefficients\n%s\n\tpath a\t\tpath b\t\tpath ab\t\tpath c''\n',dashes);
for k=1:size(theta,2)
    fprintf('PDM%2d\t%5.4f\t\t%5.4f\t\t%5.4f\t\t%5.4f\n',k,theta(3,k),theta(4,k),theta(5,k),theta(2,k));
end
fprintf('%s\n',dashes);

col = lines(4);
create_figure('PDM paths',1,3); clf;
subplot(1,3,1);
plot(theta(3,:),'-o','color',col(1,:),'linewidth',1.5); 
title('path a'); xlabel('PDM #'); ylabel('coefficients');

subplot(1,3,2);
plot(theta(4,:),'-o','color',col(2,:),'linewidth',1.5);
title('path b'); xlabel('PDM #');

subplot(1,3,3);
plot(abs(theta(5,:)),'-o','color',col(3,:),'linewidth',1.5);
title('abs(path ab)'); xlabel('PDM #');

ax=findobj(gcf,'Type','axes');
set(ax,'xlim',[0.5 size(theta,2)+0.5],'FontSize',12,'Xtick',1:size(theta,2));

drawnow, snapnow;


%% FDR-CORRECTED RESULTS
% ----------------------------------------------------------------

printhdr('FDR-corrected results');

for i = 1:size(pdm.Wfull,2)
   
    %% Results table for individual PDMs, FDR-corrected 
    
    printhdr(strcat('FDR-corrected results, PDM #',num2str(i)));
    fprintf('FDR q < .05 = p < %3.8f\n', pdm.pThreshold(i));

    % threshold PDM at fdr threshold from
    % pdm.pThreshold(1))
    dat_fdr{i} = dat;
    dat_fdr{i}.dat = pdm.Wfull{i}.*(pdm.boot.p{i}<pdm.pThreshold(i));
    
    reg_fdr{i} = region(dat_fdr{i});
    [reg_fdr{i}, ~, ~ ] = autolabel_regions_using_atlas(reg_fdr{i});
    [reg_pos_fdr{i},reg_neg_fdr{i},results_table_fdr{i}] = table(reg_fdr{i},'k',kthresh);
    reg_all_fdr{i} = [reg_pos_fdr{i},reg_neg_fdr{i}];
    
    fprintf('\n\n');
    
    %% Montage of individual regions for individual PDMs, FDR-corrected
    
    printhdr(strcat('FDR-corrected results, PDM #',num2str(i)));
    fprintf('FDR q < .05 = p < %3.8f\n', pdm.pThreshold(i));
    
    montage(reg_pos_fdr{i}, 'colormap', 'regioncenters');
    drawnow, snapnow;
    
    montage(reg_neg_fdr{i}, 'colormap', 'regioncenters');
    drawnow, snapnow;
    
    %% Montage of all regions for individual PDMs, FDR-corrected
    
    printhdr(strcat('FDR-corrected results, PDM #',num2str(i)));
    fprintf('FDR q < .05 = p < %3.8f\n', pdm.pThreshold(i));
    
    canlab_results_fmridisplay(reg_all_fdr{i},'outline','linewidth',0.5,'montagetype','full hcp');
    drawnow, snapnow;

end % fdr for loop


%% Results table for joint PDM, FDR-corrected 

printhdr('FDR-corrected results, joint PDM');
fprintf('FDR q < .05 = p < %3.8f\n', pdm.pThreshold(i+1));

% threshold PDM at fdr threshold from
% pdm.pThreshold(i+1))
dat_fdr{i+1} = dat;
dat_fdr{i+1}.dat = pdm.WfullJoint.*(pdm.boot.pJointPDM{1}<pdm.pThreshold(i+1));

if ~isempty(dat_fdr{i+1})
    reg_fdr{i+1} = region(dat_fdr{i+1});
    [reg_fdr{i+1}, ~, ~ ] = autolabel_regions_using_atlas(reg_fdr{i+1});
    [reg_pos_fdr{i+1},reg_neg_fdr{i+1},results_table_fdr{i+1}] = table(reg_fdr{i+1},'k',kthresh);
    reg_all_fdr{i+1} = [reg_pos_fdr{i+1},reg_neg_fdr{i+1}];

    fprintf('\n\n');

    %% Montage of individual regions for joint PDM, FDR-corrected

    printhdr('FDR-corrected results, joint PDM');
    fprintf('FDR q < .05 = p < %3.8f\n', pdm.pThreshold(i+1));

    montage(reg_pos_fdr{i+1}, 'colormap', 'regioncenters');
    drawnow, snapnow;

    montage(reg_neg_fdr{i+1}, 'colormap', 'regioncenters');
    drawnow, snapnow;

    %% Montage of all regions for joint PDM, FDR-corrected

    printhdr('FDR-corrected results, joint PDM');
    fprintf('FDR q < .05 = p < %3.8f\n', pdm.pThreshold(i+1));

    canlab_results_fmridisplay(reg_all_fdr{i+1},'outline','linewidth',0.5,'montagetype','full hcp');
    drawnow, snapnow;

else
    fprintf('no significant FDR-corrected results to display for joint PDM');

end % fdr joint pdm if loop


%% UNCORRECTED RESULTS
% ----------------------------------------------------------------

printhdr('uncorrected results');
    
for i = 1:size(pdm.Wfull,2)
    
    %% Results table for individual PDMs, uncorrected 
    
    printhdr(strcat('uncorrected results, PDM #',num2str(i)));
    fprintf('p uncorrected < %3.8f\n', pthresh);

    % threshold PDM at pthresh defined above
    dat_unc{i} = dat;
    dat_unc{i}.dat = pdm.Wfull{i}.*(pdm.boot.p{i}<pthresh);
    
    reg_unc{i} = region(dat_unc{i});
    [reg_unc{i}, ~, ~ ] = autolabel_regions_using_atlas(reg_unc{i});
    [reg_pos_unc{i},reg_neg_unc{i},results_table_unc{i}] = table(reg_unc{i},'k',kthresh);
    reg_all_unc{i} = [reg_pos_unc{i},reg_neg_unc{i}];
    
    fprintf('\n\n');
    
    %% Montage of individual regions for individual PDMs, uncorrected
    
    printhdr(strcat('uncorrected results, PDM #',num2str(i)));
    fprintf('p uncorrected < %3.8f\n', pthresh);
    
    montage(reg_pos_unc{i}, 'colormap', 'regioncenters');
    drawnow, snapnow;
    
    montage(reg_neg_unc{i}, 'colormap', 'regioncenters');
    drawnow, snapnow;
    
    %% Montage of all regions for individual PDMs, uncorrected
    
    printhdr(strcat('uncorrected results, PDM #',num2str(i)));
    fprintf('p uncorrected < %3.8f\n', pthresh);
    
    canlab_results_fmridisplay(reg_all_unc{i},'outline','linewidth',0.5,'montagetype','full hcp');
    drawnow, snapnow;

end % unc for loop


%% Results table for joint PDM, uncorrected 

printhdr('uncorrected results, joint PDM');
fprintf('p uncorrected < %3.8f\n', pthresh);

% threshold PDM at pthresh defined above
dat_unc{i+1} = dat;
dat_unc{i+1}.dat = pdm.WfullJoint.*(pdm.boot.pJointPDM{1}<pthresh);
    
if ~isempty(dat_unc{i+1})

    reg_unc{i+1} = region(dat_unc{i+1});
    [reg_unc{i+1}, ~, ~ ] = autolabel_regions_using_atlas(reg_unc{i+1});
    [reg_pos_unc{i+1},reg_neg_unc{i+1},results_table_unc{i+1}] = table(reg_unc{i+1},'k',kthresh);
    reg_all_unc{i+1} = [reg_pos_unc{i+1},reg_neg_unc{i+1}];

    fprintf('\n\n');

    %% Montage of individual regions for joint PDM, uncorrected

    printhdr('uncorrected results, joint PDM');
    fprintf('p uncorrected < %3.8f\n', pthresh);

    montage(reg_pos_unc{i+1}, 'colormap', 'regioncenters');
    drawnow, snapnow;

    montage(reg_neg_unc{i+1}, 'colormap', 'regioncenters');
    drawnow, snapnow;

    %% Montage of all regions for joint PDM, uncorrected

    printhdr('uncorrected results, joint PDM');
    fprintf('p uncorrected < %3.8f\n', pthresh);

    canlab_results_fmridisplay(reg_all_unc{i+1},'outline','linewidth',0.5,'montagetype','full hcp');
    drawnow, snapnow;

else
    fprintf('no significant results to display for joint PDM at p uncorrected <%3.8f\n', pthresh);

end % unc joint PDM if loop


%% SOURCE RECONSTRUCTIONS
% ----------------------------------------------------------------

printhdr('source reconstructions');

for n = 1:size(pdm.Wfull,2)
    
    printhdr(strcat('source reconstruction map, PDM #',num2str(n)));
    
    canlab_results_fmridisplay(source_obj_j{1,n},'montagetype','full hcp');
    f1 = gcf;
    f1.WindowState = 'maximized';
    drawnow, snapnow;
    
%     f2 = figure;
%     montage(source_obj_j{1,n},'trans');
%     f2.WindowState = 'maximized';
%     drawnow, snapnow;
    
end

%% Save data and region objects and tables
% ---------------------------------------------------------------------

printhdr('Saving region objects and tables to disk');
disp('dat_fdr, etc.  : cell array of thresholded data objects at FDR threshold');
disp('dat_unc, etc.  : cell array of thresholded data objects at uncorrected threshold');
disp('In cell arrays of data objects, dat_*{i}.dat contains thresholded data for the i-th pdm');
disp('reg_fdr, etc.  : cell array of labeled region objects at FDR threshold');
disp('reg_unc, etc.  : cell array labeled region objects at uncorrected threshold');
disp('reg_all_fdr, etc.  : cell array of labeled region objects at FDR threshold and extent threshold');
disp('reg_all_unc, etc.  : cell array labeled region objects at uncorrected threshold and extent threshold');
disp('In cell arrays of region objects, region_obj{i}(j).dat contains extracted data for the i-th pdm and j-th significant region, averaged over voxels');
disp('reg_all_x is used to plot montages of all regions');
disp('Use these data in plots, secondary analyses, or to run mediation.m within individual regions');
disp('reg_pos/neg_fdr, etc.  : cell array of region objects at FDR threshold, split for positive and negative, and thresholded at extent threshold');
disp('reg_pos/neg_unc, etc.  : cell array of region objects at FDR threshold, split for positive and negative, and thresholded at extent threshold');
disp('These data are used to plot montages of individual regions');
disp('results_table_fdr, etc.  : cell array of tables at FDR threshold');
disp('results_table_unc, etc.  : cell array of tables at uncorrected threshold');
disp('Use these data to write tables to excel etc');

cldir = fullfile(pwd, 'region_objects_and_tables');
if ~exist(cldir, 'dir'), mkdir(cldir); end

savefilename = fullfile(cldir, 'region_objects_and_tables.mat');

save(savefilename, 'dat_fdr', 'dat_unc', 'reg_*', 'results_*'); 

fprintf('Saved objects in:\n%s\n', savefilename)

fprintf('\n\n');
    

end % function

%% inline functions taken from multivariateMediation.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    function printPathCoeff(theta)
        theta = [theta{:}];
        dashes = '_____________________________________________________________________';
        fprintf('\nPDM path coefficients\n%s\n\tpath a\t\tpath b\t\tpath ab\t\tpath c''\n',dashes);
        for k=1:size(theta,2)
            fprintf('PDM%2d\t%5.4f\t\t%5.4f\t\t%5.4f\t\t%5.4f\n',k,theta(3,k),theta(4,k),theta(5,k),theta(2,k));
        end
        fprintf('%s\n',dashes);
    end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    function plotPathCoeff(theta)
        theta = [theta{:}];
        col = lines(4);
        create_figure('PDM paths',1,3); clf;
        subplot(1,3,1);
        plot(theta(3,:),'-o','color',col(1,:),'linewidth',1.5); 
        title('path a'); xlabel('PDM #'); ylabel('coefficients');
        
        subplot(1,3,2);
        plot(theta(4,:),'-o','color',col(2,:),'linewidth',1.5);
        title('path b'); xlabel('PDM #');
        
        subplot(1,3,3);
        plot(abs(theta(5,:)),'-o','color',col(3,:),'linewidth',1.5);
        title('abs(path ab)'); xlabel('PDM #');

        ax=findobj(gcf,'Type','axes');
        set(ax,'xlim',[0.5 size(theta,2)+0.5],'FontSize',12,'Xtick',1:size(theta,2));
        drawnow;
    end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%